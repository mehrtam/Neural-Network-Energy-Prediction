% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 27-Jan-2024 14:08:25
%
% This script assumes these variables are defined:
%
%   buildingInputs - input data.
%   buildingTargets - target data.

data = load('building_dataset');
[inputs,targets] = building_dataset;


% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = [15 8];
TF={'tansig','tansig','purelin'};
net = newff(inputs,targets,hiddenLayerSize,TF);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

net.trainParam.showWindow=true;
net.trainParam.showCommandLine=false;
net.trainParam.show=1;
net.trainParam.epochs=700;
net.trainParam.goal=1e-9;
net.trainParam.max_fail=20;

% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
e = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)


% Recalculate Training, Validation and Test Performance
   

%training performance
trainInd = tr.trainInd;
trainInputs = inputs(: , trainInd);
trainTargets = targets(: , trainInd);
trainOutputs = outputs(: , trainInd);
trainErrors = trainTargets - trainOutputs ; 
trainPerformance = perform(net , trainTargets , trainOutputs)
    

%val performance
valInd = tr.valInd;
valInputs = inputs(: , valInd);
valTargets = targets(: , valInd);
valOutputs = outputs(: , valInd);
valError = valTargets - valOutputs;
valPerformance = perform(net , valTargets , valOutputs)
    

%test performance
testInd = tr.testInd;
testInputs = inputs(: , testInd);
testTargets = targets(: , testInd);
testOutputs = outputs(: , testInd);
testError  = testTargets - testOutputs;
testPerformance = perform(net , testTargets , testOutputs)

% View the Network
view(net)





% Results for Target #1
PlotResults(targets(1,:),outputs(1,:),'All Data (1)');
PlotResults(trainTargets(1,:),trainOutputs(1,:),'Train Data (1)');
PlotResults(valTargets(1,:),valOutputs(1,:),'Validation Data (1)');
PlotResults(testTargets(1,:),testOutputs(1,:),'Test Data (1)');

% Results for Target #2
PlotResults(targets(2,:),outputs(2,:),'All Data (2)');
PlotResults(trainTargets(2,:),trainOutputs(2,:),'Train Data (2)');
PlotResults(valTargets(2,:),valOutputs(2,:),'Validation Data (2)');
PlotResults(testTargets(2,:),testOutputs(2,:),'Test Data (2)');


% Results for Target #3
PlotResults(targets(3,:),outputs(3,:),'All Data (3)');
PlotResults(trainTargets(3,:),trainOutputs(3,:),'Train Data (3)');
PlotResults(valTargets(3,:),valOutputs(3,:),'Validation Data (3)');
PlotResults(testTargets(3,:),testOutputs(3,:),'Test Data (3)');





% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
